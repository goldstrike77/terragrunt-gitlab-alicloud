include:
  - template: Terraform/Base.latest.gitlab-ci.yml
  - template: Jobs/SAST-IaC.latest.gitlab-ci.yml

stages:
  - init
  - validate
  - test
  - build
  - deploy
  - cleanup

variables:
  IGNORE_TF_DEPRECATION_WARNING: "true"
  SECURE_ANALYZERS_PREFIX: "ccr.ccs.tencentyun.com/gitlab-org"
  TF_STATE_BASE_ADDRESS: $CI_API_V4_URL/projects/$CI_PROJECT_ID/terraform/state
  TF_CLI_ARGS_apply: "-parallelism=1"

default:
  image:
    name: "registry.cn-hangzhou.aliyuncs.com/goldenimage/terragrunt:latest-v0.69.9"
  
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - ${TF_ROOT}/**/.terraform
    policy: pull

.source:
  script:
    - source $(which gitlab-terraform)

before_script:
  - cp /etc/gitlab-runner/certs/gitlab.home.local.crt /usr/local/share/ca-certificates/ca.crt
  - update-ca-certificates
  - |-
    cat <<EOF > ~/.terraformrc
    provider_installation {
      network_mirror {
        url = "https://obs.home.local/mirror/"
      }
    }
    EOF

init:
  stage: init
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .terraform/
    policy: pull-push
  script:
    - !reference [.source, script]
    - terragrunt run-all init -input=false -reconfigure

fmt:
  extends: .terraform:fmt
  script:
    - !reference [.source, script]
    - terragrunt hclfmt -check -diff
    - terragrunt run-all fmt -check -diff -recursive

validate:
  extends: .terraform:validate
  script:
    - !reference [.source, script]
    - terragrunt run-all validate

build:
  extends: .terraform:build
  script:
    - !reference [.source, script]
    - terragrunt run-all plan -input=false -out=plan.cache
    - terragrunt run-all show -json plan.cache | jq -r "${JQ_PLAN}" | jq -s 'map(to_entries) | flatten | group_by(.key) | map({(.[0].key):map(.value) | add}) | add' > "${TF_ROOT}/plan.json"
  artifacts:
    paths:
      - ${TF_ROOT}/**/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

deploy:
  extends: .terraform:deploy
  dependencies: [build]
  script:
    - !reference [.source, script]
    - terragrunt run-all apply --terragrunt-non-interactive -input=false plan.cache
    - terraform output -json password |jq
  rules:
    - if: $CI_COMMIT_TITLE == "deploy"
      when: on_success
  environment:
    name: $TF_STATE_NAME

destroy:
  extends: .terraform:destroy
  dependencies: [build]
  script:
    - !reference [.source, script]
    - terragrunt run-all destroy --terragrunt-non-interactive -input=false
  rules:
    - if: $CI_COMMIT_TITLE == "destroy"
      when: on_success
  environment:
    name: $TF_STATE_NAME